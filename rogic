1. stack A 를 만든다
main->ft_process

ft_process
2.예외 처리(인자가 들어온 인자가 없을 경우)

그 외 인자가 하나만 들어올 경우
ft_process->ft_subprocess
(
	공백을 기준으로 ft_split
	char **temp에 담아준뒤

	temp[i]를 atoi2로 int형태로 바꿔준다.
	atoi2에서 인트 범위를 넘어갈 경우 Error처리가 되어있음
	int형으로 바뀐 각각의 값을 각 노드로 만들어서 양방향 리스트로 add_back으로 이어준다.

	양방향리스트의 시작주소를 리턴한다
	ft_subprocess->ft_process
)
else
{
	인자 av[i]를 ft_atoi2를 이용해 int 형으로 바꾼뒤
	add_back함수로 리스트를 만들어 이어준다.
}
만들어진 리스트 a를 반환한다
ft_process->main
{
	만들어진 리스트에 대해서 a가 NULL이거나
	리스트중 중복되는 값이 있으면 리스트 a를 free하고
	Error를 출력한다.
}
준비완료

if (!ft_checksorted(a))
{
	스택 a에 대하여 정렬되어있지 않으면
	ft_sort(&a)로 정렬한다.
}
main->ft_sort

ft_sort
{
	다른 스택 b를 만든다.

	if (ft_stacksize(*stack_a) == 2)
	{
		스택 A에 대하여 리스트의 길이가 2일때는
		ft_sa(stack_a, 0)를 사용하여 top에 위치한 두 개의 원소의 위치를 바꿔준다
	}
	else
	{
		ft_sort->ft_sort_b
		stack_b = ft_sort_b(stack_a);
		스택 A에 있는 요소를 스택 B로 3개가 남을때 까지 옮긴후
		3개를 정렬한다.
	}
}